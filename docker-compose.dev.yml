# ===========================================
# TanıAI Development Docker Compose
# ===========================================

version: '3.8'

services:
  # PostgreSQL Veritabanı
  postgres:
    image: postgres:15-alpine
    container_name: taniai-db-dev
    environment:
      POSTGRES_DB: ${DB_NAME:-taniai_db}
      POSTGRES_USER: ${DB_USER:-taniai_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - taniai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-taniai_user} -d ${DB_NAME:-taniai_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Caching & Session)
  redis:
    image: redis:7-alpine
    container_name: taniai-redis-dev
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - taniai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Görüntü İşleme API (Development)
  image-analysis:
    build:
      context: ./görüntü işleme
      dockerfile: Dockerfile
    container_name: taniai-image-analysis-dev
    ports:
      - "${IMAGE_API_PORT:-8001}:8000"
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-taniai_user}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-taniai_db}
      - REDIS_URL=redis://redis:6379
      - HOST=0.0.0.0
      - PORT=8000
      - MODELS_DIR=/app/models
      - DATA_DIR=/app/data
      - DEBUG=true
      - RELOAD=true
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taniai-network
    volumes:
      - ./görüntü işleme:/app
      - model_data_dev:/app/models
      - data_volume_dev:/app/data
    restart: unless-stopped
    command: ["python", "-m", "uvicorn", "api:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Tanı Sistemi API (Development)
  diagnosis:
    build:
      context: ./Tanı-hastalıklar
      dockerfile: Dockerfile
    container_name: taniai-diagnosis-dev
    ports:
      - "${DIAGNOSIS_API_PORT:-8002}:8000"
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-taniai_user}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-taniai_db}
      - REDIS_URL=redis://redis:6379
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=true
      - RELOAD=true
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taniai-network
    volumes:
      - ./Tanı-hastalıklar:/app
    restart: unless-stopped
    command: ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # İlaç Takibi API (Development)
  medication:
    build:
      context: ./ilaç takibi
      dockerfile: Dockerfile
    container_name: taniai-medication-dev
    ports:
      - "${MEDICATION_API_PORT:-8003}:8000"
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-taniai_user}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-taniai_db}
      - REDIS_URL=redis://redis:6379
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=true
      - RELOAD=true
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taniai-network
    volumes:
      - ./ilaç takibi:/app
    restart: unless-stopped
    command: ["python", "-m", "uvicorn", "simple_medication_api:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Randevu Sistemi API (Development)
  appointment:
    build:
      context: ./RANDEVU/backend
      dockerfile: Dockerfile
    container_name: taniai-appointment-dev
    ports:
      - "${APPOINTMENT_API_PORT:-8004}:8000"
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-taniai_user}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-taniai_db}
      - REDIS_URL=redis://redis:6379
      - HOST=0.0.0.0
      - PORT=8000
      - OLLAMA_HOST=http://ollama:11434
      - DEBUG=true
      - RELOAD=true
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taniai-network
    volumes:
      - ./RANDEVU/backend:/app
    restart: unless-stopped
    command: ["python", "-m", "uvicorn", "simple_api:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Whisper ASR Servisi (Development)
  whisper-asr:
    build:
      context: ./whisper_asr
      dockerfile: Dockerfile
    container_name: taniai-whisper-dev
    ports:
      - "${WHISPER_API_PORT:-8005}:8001"
    environment:
      - HOST=0.0.0.0
      - PORT=8001
      - DEBUG=true
      - LOG_LEVEL=debug
    networks:
      - taniai-network
    volumes:
      - ./whisper_asr:/app
    restart: unless-stopped
    command: ["python", "-m", "uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]

  # TANI Triage API (Development)
  triage:
    build:
      context: ./TANI/UstSolunumYolu/services/triage_api
      dockerfile: Dockerfile
    container_name: taniai-triage-dev
    ports:
      - "${TRIAGE_API_PORT:-8006}:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - TANI_ROOT=/app/TANI
      - VISION_MODEL_PATH=/app/TANI/UstSolunumYolu/modules/vision_cxr_covid/models/v1_20251019_0107/best.keras
      - VISION_LABELS_PATH=/app/TANI/UstSolunumYolu/modules/vision_cxr_covid/models/v1_20251019_0107/labelmap.json
      - DEBUG=true
      - LOG_LEVEL=debug
    networks:
      - taniai-network
    volumes:
      - ./TANI:/app/TANI
    restart: unless-stopped
    command: ["python", "-m", "uvicorn", "src.app:APP", "--host", "0.0.0.0", "--port", "8000", "--reload"]

volumes:
  postgres_data_dev:
  model_data_dev:
  data_volume_dev:

networks:
  taniai-network:
    driver: bridge
