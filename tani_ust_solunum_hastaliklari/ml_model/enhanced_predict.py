import joblib
import numpy as np
import pandas as pd
from enhanced_nlp_parser import EnhancedSymptomParser
import warnings
warnings.filterwarnings('ignore')

class EnhancedDiseasePredictor:
    def __init__(self, model_path="advanced_disease_model.pkl"):
        self.model_path = model_path
        self.model_data = None
        self.parser = EnhancedSymptomParser()
        self.load_model()
    
    def load_model(self):
        """Eƒüitilmi≈ü modeli y√ºkler"""
        try:
            self.model_data = joblib.load(self.model_path)
            print("‚úÖ Geli≈ümi≈ü model y√ºklendi")
            print(f"üìä Model t√ºr√º: {type(self.model_data['model'])}")
            print(f"üìã Desteklenen sƒ±nƒ±flar: {self.model_data['label_encoder'].classes_}")
        except FileNotFoundError:
            print(f"‚ö†Ô∏è Model dosyasƒ± bulunamadƒ±: {self.model_path}")
            print("üîß √ñnce advanced_models.py ile model eƒüitimi yapƒ±n")
            self.model_data = None
    
    def preprocess_text_input(self, text_input):
        """Metin giri≈üini √∂n i≈üleme tabi tutar"""
        print(f"üîç Giri≈ü metni: '{text_input}'")
        
        # NLP parser ile semptom vekt√∂r√º olu≈ütur
        parsed_symptoms = self.parser.parse_symptoms(text_input)
        
        # Model i√ßin gerekli semptom sƒ±rasƒ±na g√∂re vekt√∂r olu≈ütur (T√úM 18 SEMPTOM)
        symptom_order = [
            "Ate≈ü", "Ba≈ü Aƒürƒ±sƒ±", "Bitkinlik", "Boƒüaz Aƒürƒ±sƒ±", "Bulantƒ± veya Kusma",
            "Burun Akƒ±ntƒ±sƒ± veya Tƒ±kanƒ±klƒ±ƒüƒ±", "G√∂z Ka≈üƒ±ntƒ±sƒ± veya Sulanma", "Hap≈üƒ±rma",
            "ƒ∞shal", "Koku veya Tat Kaybƒ±", "Nefes Darlƒ±ƒüƒ±", "√ñks√ºr√ºk", "V√ºcut Aƒürƒ±larƒ±",
            "G√∂ƒü√ºs Aƒürƒ±sƒ±", "Titreme", "Gece Terlemesi", "ƒ∞≈ütahsƒ±zlƒ±k", "Konsantrasyon G√º√ßl√ºƒü√º"
        ]
        
        # T√úM semptom vekt√∂r√º (18 semptom)
        full_vector = []
        for symptom in symptom_order:
            full_vector.append(parsed_symptoms.get(symptom, 0.0))
        
        return np.array(full_vector), parsed_symptoms
    
    def create_enhanced_features(self, full_vector, parsed_symptoms):
        """Geli≈ümi≈ü √∂zellikler olu≈üturur"""
        # Tam vekt√∂r√º DataFrame'e √ßevir
        symptom_names = [
            "Ate≈ü", "Ba≈ü Aƒürƒ±sƒ±", "Bitkinlik", "Boƒüaz Aƒürƒ±sƒ±", "Bulantƒ± veya Kusma",
            "Burun Akƒ±ntƒ±sƒ± veya Tƒ±kanƒ±klƒ±ƒüƒ±", "G√∂z Ka≈üƒ±ntƒ±sƒ± veya Sulanma", "Hap≈üƒ±rma",
            "ƒ∞shal", "Koku veya Tat Kaybƒ±", "Nefes Darlƒ±ƒüƒ±", "√ñks√ºr√ºk", "V√ºcut Aƒürƒ±larƒ±",
            "G√∂ƒü√ºs Aƒürƒ±sƒ±", "Titreme", "Gece Terlemesi", "ƒ∞≈ütahsƒ±zlƒ±k", "Konsantrasyon G√º√ßl√ºƒü√º"
        ]
        
        df = pd.DataFrame([full_vector], columns=symptom_names)
        
        # Geli≈ümi≈ü √∂zellikler ekle
        enhanced_features = df.copy()
        
        # 1. COVID-19 g√∂stergesi
        if "Ate≈ü" in df.columns and "Koku veya Tat Kaybƒ±" in df.columns and "Nefes Darlƒ±ƒüƒ±" in df.columns:
            enhanced_features["COVID_Indicator"] = (
                df["Ate≈ü"] * df["Koku veya Tat Kaybƒ±"] * df["Nefes Darlƒ±ƒüƒ±"]
            )
        
        # 2. Grip g√∂stergesi
        if "Ate≈ü" in df.columns and "V√ºcut Aƒürƒ±larƒ±" in df.columns and "Bitkinlik" in df.columns:
            enhanced_features["Grip_Indicator"] = (
                df["Ate≈ü"] * df["V√ºcut Aƒürƒ±larƒ±"] * df["Bitkinlik"]
            )
        
        # 3. Soƒüuk algƒ±nlƒ±ƒüƒ± g√∂stergesi
        if "Burun Akƒ±ntƒ±sƒ± veya Tƒ±kanƒ±klƒ±ƒüƒ±" in df.columns and "Hap≈üƒ±rma" in df.columns:
            enhanced_features["Cold_Indicator"] = (
                df["Burun Akƒ±ntƒ±sƒ± veya Tƒ±kanƒ±klƒ±ƒüƒ±"] * df["Hap≈üƒ±rma"] * (1 - df["Ate≈ü"])
            )
        
        # 4. Alerji g√∂stergesi
        if "G√∂z Ka≈üƒ±ntƒ±sƒ± veya Sulanma" in df.columns and "Hap≈üƒ±rma" in df.columns:
            enhanced_features["Allergy_Indicator"] = (
                df["G√∂z Ka≈üƒ±ntƒ±sƒ± veya Sulanma"] * df["Hap≈üƒ±rma"] * (1 - df["Ate≈ü"])
            )
        
        # 5. Toplam semptom ≈üiddeti
        enhanced_features["Total_Symptom_Severity"] = df.sum(axis=1)
        
        # 6. Semptom sayƒ±sƒ±
        enhanced_features["Symptom_Count"] = (df > 0.1).sum(axis=1)
        
        # 7. Solunum sistemi skoru
        respiratory_symptoms = ["Nefes Darlƒ±ƒüƒ±", "√ñks√ºr√ºk", "Burun Akƒ±ntƒ±sƒ± veya Tƒ±kanƒ±klƒ±ƒüƒ±"]
        available_resp = [s for s in respiratory_symptoms if s in df.columns]
        if available_resp:
            enhanced_features["Respiratory_Score"] = df[available_resp].mean(axis=1)
        
        # 8. Sistemik semptom skoru
        systemic_symptoms = ["Ate≈ü", "Bitkinlik", "V√ºcut Aƒürƒ±larƒ±", "Ba≈ü Aƒürƒ±sƒ±"]
        available_syst = [s for s in systemic_symptoms if s in df.columns]
        if available_syst:
            enhanced_features["Systemic_Score"] = df[available_syst].mean(axis=1)
        
        # 9. Gastrointestinal semptom skoru
        gi_symptoms = ["Bulantƒ± veya Kusma", "ƒ∞shal"]
        available_gi = [s for s in gi_symptoms if s in df.columns]
        if available_gi:
            enhanced_features["GI_Score"] = df[available_gi].mean(axis=1)
        
        return enhanced_features
    
    def predict_disease(self, text_input):
        """Hastalƒ±k tahmini yapar"""
        if self.model_data is None:
            return {
                "error": "Model y√ºklenemedi. √ñnce model eƒüitimi yapƒ±n.",
                "prediction": None,
                "probabilities": None,
                "confidence": None
            }
        
        try:
            # Metin giri≈üini i≈üle
            full_vector, parsed_symptoms = self.preprocess_text_input(text_input)
            
            # Geli≈ümi≈ü √∂zellikler olu≈ütur
            enhanced_features = self.create_enhanced_features(full_vector, parsed_symptoms)
            
            # √ñl√ßeklendirme
            scaled_features = self.model_data['scaler'].transform(enhanced_features)
            
            # √ñzellik se√ßimi
            selected_features = self.model_data['feature_selector'].transform(scaled_features)
            
            # Tahmin yap
            prediction = self.model_data['model'].predict(selected_features)[0]
            probabilities = self.model_data['model'].predict_proba(selected_features)[0]
            
            # Etiketleri decode et
            predicted_disease = self.model_data['label_encoder'].inverse_transform([prediction])[0]
            
            # Olasƒ±lƒ±k skorlarƒ±
            class_names = self.model_data['label_encoder'].classes_
            prob_dict = {name: prob for name, prob in zip(class_names, probabilities)}
            
            # G√ºven skoru hesapla
            max_prob = max(probabilities)
            confidence = self.calculate_confidence(max_prob, parsed_symptoms, predicted_disease)
            
            # Tanƒ±sal g√ºven skorlarƒ±
            diagnostic_confidence = self.parser.get_diagnostic_confidence(full_vector)
            
            return {
                "prediction": predicted_disease,
                "probabilities": prob_dict,
                "confidence": confidence,
                "diagnostic_confidence": diagnostic_confidence,
                "detected_symptoms": {k: v for k, v in parsed_symptoms.items() if v > 0},
                "max_probability": max_prob
            }
            
        except Exception as e:
            return {
                "error": f"Tahmin sƒ±rasƒ±nda hata: {str(e)}",
                "prediction": None,
                "probabilities": None,
                "confidence": None
            }
    
    def calculate_confidence(self, max_prob, parsed_symptoms, predicted_disease):
        """G√ºven skoru hesaplar"""
        base_confidence = max_prob
        
        # Semptom sayƒ±sƒ±na g√∂re ayarlama
        symptom_count = sum(1 for v in parsed_symptoms.values() if v > 0)
        if symptom_count >= 5:
            base_confidence += 0.1
        elif symptom_count < 2:
            base_confidence -= 0.2
        
        # Hastalƒ±ƒüa √∂zel g√ºven ayarlamasƒ±
        if predicted_disease == "COVID-19":
            covid_key_symptoms = ["Koku veya Tat Kaybƒ±", "Nefes Darlƒ±ƒüƒ±", "Ate≈ü"]
            covid_symptom_count = sum(1 for s in covid_key_symptoms if parsed_symptoms.get(s, 0) > 0.5)
            if covid_symptom_count >= 2:
                base_confidence += 0.15
        
        elif predicted_disease == "Grip":
            flu_key_symptoms = ["Ate≈ü", "V√ºcut Aƒürƒ±larƒ±", "Bitkinlik"]
            flu_symptom_count = sum(1 for s in flu_key_symptoms if parsed_symptoms.get(s, 0) > 0.5)
            if flu_symptom_count >= 2:
                base_confidence += 0.1
        
        return min(1.0, max(0.0, base_confidence))
    
    def get_detailed_analysis(self, text_input):
        """Detaylƒ± analiz raporu olu≈üturur"""
        result = self.predict_disease(text_input)
        
        if result.get("error"):
            return result
        
        analysis = {
            "input_text": text_input,
            "predicted_disease": result["prediction"],
            "confidence": result["confidence"],
            "max_probability": result["max_probability"],
            "detected_symptoms": result["detected_symptoms"],
            "all_probabilities": result["probabilities"],
            "diagnostic_confidence": result["diagnostic_confidence"],
            "recommendations": self.get_recommendations(result)
        }
        
        return analysis
    
    def get_recommendations(self, result):
        """√ñneriler olu≈üturur"""
        recommendations = []
        predicted_disease = result["prediction"]
        confidence = result["confidence"]
        
        if confidence < 0.7:
            recommendations.append("‚ö†Ô∏è D√º≈ü√ºk g√ºven skoru. Doktor kons√ºltasyonu √∂nerilir.")
        
        if predicted_disease == "COVID-19":
            recommendations.extend([
                "üè• COVID-19 ≈ü√ºphesi. Acil doktor kons√ºltasyonu gerekli.",
                "üîí ƒ∞zolasyon √∂nerilir.",
                "üß™ PCR testi yaptƒ±rƒ±n."
            ])
        elif predicted_disease == "Grip":
            recommendations.extend([
                "üè• Grip benzeri semptomlar. Doktor kontrol√º √∂nerilir.",
                "üíä Semptomatik tedavi alabilirsiniz.",
                "üõå Dinlenme ve bol sƒ±vƒ± t√ºketimi √∂nerilir."
            ])
        elif predicted_disease == "Soƒüuk Algƒ±nlƒ±ƒüƒ±":
            recommendations.extend([
                "üè† Hafif soƒüuk algƒ±nlƒ±ƒüƒ±. Evde dinlenin.",
                "üíß Bol sƒ±vƒ± t√ºketin.",
                "üå°Ô∏è Ate≈ü d√º≈ü√ºr√ºc√º kullanabilirsiniz."
            ])
        elif predicted_disease == "Mevsimsel Alerji":
            recommendations.extend([
                "üå∏ Mevsimsel alerji belirtileri.",
                "üíä Antihistaminik kullanabilirsiniz.",
                "üè† Allerjenlerden uzak durun."
            ])
        
        return recommendations

def interactive_prediction():
    """Etkile≈üimli tahmin sistemi"""
    predictor = EnhancedDiseasePredictor()
    
    if predictor.model_data is None:
        print("‚ùå Model y√ºklenemedi. √ñnce model eƒüitimi yapƒ±n:")
        print("1. enhanced_data_generation.py √ßalƒ±≈ütƒ±rƒ±n")
        print("2. advanced_models.py √ßalƒ±≈ütƒ±rƒ±n")
        return
    
    print("üè• Geli≈ümi≈ü Hastalƒ±k Tanƒ± Sistemi")
    print("=" * 50)
    print("Semptomlarƒ±nƒ±zƒ± doƒüal dilde yazƒ±n...")
    print("√ñrnek: 'Y√ºksek ate≈üim var, nefes alamƒ±yorum, koku alamƒ±yorum'")
    print("√áƒ±kmak i√ßin 'quit' yazƒ±n\n")
    
    while True:
        try:
            user_input = input("üîç Belirtilerinizi yazƒ±n: ").strip()
            
            if user_input.lower() in ['quit', 'exit', '√ßƒ±k']:
                print("üëã G√∂r√º≈ümek √ºzere!")
                break
            
            if not user_input:
                print("‚ö†Ô∏è L√ºtfen belirtilerinizi yazƒ±n.")
                continue
            
            print("\nüîÑ Analiz yapƒ±lƒ±yor...")
            
            # Detaylƒ± analiz
            analysis = predictor.get_detailed_analysis(user_input)
            
            if analysis.get("error"):
                print(f"‚ùå Hata: {analysis['error']}")
                continue
            
            # Sonu√ßlarƒ± g√∂ster
            print("\n" + "="*50)
            print("üéØ TANƒ∞ SONUCU")
            print("="*50)
            
            print(f"üè• Tahmin Edilen Hastalƒ±k: {analysis['predicted_disease']}")
            print(f"üìä G√ºven Skoru: %{analysis['confidence']*100:.1f}")
            print(f"üé≤ Maksimum Olasƒ±lƒ±k: %{analysis['max_probability']*100:.1f}")
            
            print("\nüìã Tespit Edilen Semptomlar:")
            for symptom, severity in analysis['detected_symptoms'].items():
                print(f"  ‚Ä¢ {symptom}: {severity:.2f}")
            
            print("\nüìä T√ºm Olasƒ±lƒ±klar:")
            for disease, prob in analysis['all_probabilities'].items():
                bar = "‚ñà" * int(prob * 20)
                print(f"  {disease}: {prob*100:5.1f}% {bar}")
            
            print("\nüéØ Tanƒ±sal G√ºven Skorlarƒ±:")
            for disease, score in analysis['diagnostic_confidence'].items():
                print(f"  {disease}: {score:.2f}")
            
            print("\nüí° √ñneriler:")
            for rec in analysis['recommendations']:
                print(f"  {rec}")
            
            print("\n" + "="*50 + "\n")
            
        except KeyboardInterrupt:
            print("\nüëã G√∂r√º≈ümek √ºzere!")
            break
        except Exception as e:
            print(f"‚ùå Beklenmeyen hata: {e}")

if __name__ == "__main__":
    interactive_prediction()
