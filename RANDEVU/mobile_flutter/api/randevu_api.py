#!/usr/bin/env python3
"""
TanÄ±AI Randevu API
Sesli randevu sistemi iÃ§in Ã¶zel API
"""

from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import logging
import os
import sys

# Whisper ASR modÃ¼lÃ¼nÃ¼ import et
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))
from whisper_asr import get_asr_processor

# Logging yapÄ±landÄ±rmasÄ±
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FastAPI uygulamasÄ± oluÅŸtur
app = FastAPI(
    title="TanÄ±AI Randevu API",
    description="Sesli randevu sistemi",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    """Ana sayfa"""
    return {"message": "TanÄ±AI Randevu API", "status": "active"}

@app.post("/whisper/flutter-randevu")
async def flutter_randevu(audio_file: UploadFile = File(...)):
    """
    Flutter'dan gelen ses dosyasÄ±nÄ± iÅŸle ve klinik Ã¶ner
    """
    try:
        logger.info(f"Flutter randevu isteÄŸi: {audio_file.filename}")
        
        # Dosya validasyonu
        if not audio_file.filename:
            raise HTTPException(status_code=400, detail="Dosya adÄ± bulunamadÄ±")
        
        # Dosya boyutu kontrolÃ¼ (10MB limit)
        content = await audio_file.read()
        if len(content) > 10 * 1024 * 1024:  # 10MB
            raise HTTPException(status_code=400, detail="Dosya boyutu Ã§ok bÃ¼yÃ¼k (Max: 10MB)")
        
        logger.info(f"Ses dosyasÄ± yÃ¼klendi: {audio_file.filename} ({len(content)} bytes)")
        
        # ASR processor'Ä± al
        asr_processor = get_asr_processor()
        
        # Transkripsiyon yap
        transcription_result = asr_processor.transcribe_from_bytes(content)
        
        if not transcription_result["success"]:
            raise HTTPException(
                status_code=500, 
                detail=f"Transkripsiyon hatasÄ±: {transcription_result['error']}"
            )
        
        transcript = transcription_result["transcript"]
        
        if not transcript.strip():
            return {
                "success": False,
                "error": "Ses dosyasÄ±ndan metin Ã§Ä±karÄ±lamadÄ±",
                "transcript": ""
            }
        
        logger.info(f"Transkripsiyon baÅŸarÄ±lÄ±: {len(transcript)} karakter")
        
        # Klinik Ã¶nerileri
        suggestions = _get_clinic_suggestions(transcript)
        
        return {
            "success": True,
            "transcript": transcript,
            "suggestions": suggestions
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Flutter randevu hatasÄ±: {e}")
        raise HTTPException(status_code=500, detail=f"Ses iÅŸleme hatasÄ±: {str(e)}")

def _get_clinic_suggestions(transcript: str):
    """GeliÅŸmiÅŸ klinik Ã¶nerileri dÃ¶ndÃ¼rÃ¼r"""
    transcript_lower = transcript.lower()
    
    # DetaylÄ± anahtar kelime analizi
    symptoms = {
        'neurological': ['baÅŸ', 'kafa', 'migren', 'baÅŸaÄŸrÄ±sÄ±', 'baÅŸ aÄŸrÄ±sÄ±', 'baÅŸÄ±m', 'kafam', 'baÅŸ dÃ¶nmesi', 'dÃ¶nÃ¼yor'],
        'cardiac': ['gÃ¶ÄŸÃ¼s', 'kalp', 'nefes', 'Ã§arpÄ±ntÄ±', 'kalbim', 'gÃ¶ÄŸsÃ¼m', 'nefes darlÄ±ÄŸÄ±', 'Ã§arpÄ±ntÄ±m'],
        'gastrointestinal': ['karÄ±n', 'mide', 'bulantÄ±', 'kusma', 'karÄ±n aÄŸrÄ±sÄ±', 'mide aÄŸrÄ±sÄ±', 'bulantÄ±m', 'kusuyorum'],
        'respiratory': ['Ã¶ksÃ¼rÃ¼k', 'boÄŸaz', 'burun', 'nefes', 'solunum', 'Ã¶ksÃ¼rÃ¼yorum', 'boÄŸazÄ±m'],
        'dermatological': ['cilt', 'deri', 'kaÅŸÄ±ntÄ±', 'dÃ¶kÃ¼ntÃ¼', 'kÄ±zarÄ±klÄ±k', 'cildim', 'kaÅŸÄ±nÄ±yor'],
        'musculoskeletal': ['eklem', 'kas', 'sÄ±rt', 'bel', 'boyun', 'aÄŸrÄ±', 'sÄ±rtÄ±m', 'belim', 'boynum'],
        'psychological': ['stres', 'kaygÄ±', 'endiÅŸe', 'depresyon', 'uyku', 'stresli', 'kaygÄ±lÄ±']
    }
    
    # Semptom skorlarÄ±
    scores = {}
    for category, keywords in symptoms.items():
        score = sum(1 for keyword in keywords if keyword in transcript_lower)
        if score > 0:
            scores[category] = score
    
    # En yÃ¼ksek skorlu kategoriyi bul
    if scores:
        primary_category = max(scores, key=scores.get)
        
        if primary_category == 'neurological':
            return [
                {
                    "clinic": "NÃ¶roloji",
                    "reason": "BaÅŸ aÄŸrÄ±sÄ± ve nÃ¶rolojik ÅŸikayetler iÃ§in",
                    "confidence": 0.85
                },
                {
                    "clinic": "Aile HekimliÄŸi", 
                    "reason": "Genel deÄŸerlendirme iÃ§in",
                    "confidence": 0.7
                }
            ]
        elif primary_category == 'cardiac':
            return [
                {
                    "clinic": "Kardiyoloji",
                    "reason": "Kalp ve gÃ¶ÄŸÃ¼s ÅŸikayetleri iÃ§in",
                    "confidence": 0.85
                },
                {
                    "clinic": "GÃ¶ÄŸÃ¼s HastalÄ±klarÄ±",
                    "reason": "Nefes darlÄ±ÄŸÄ± deÄŸerlendirmesi iÃ§in",
                    "confidence": 0.75
                }
            ]
        elif primary_category == 'gastrointestinal':
            return [
                {
                    "clinic": "Gastroenteroloji",
                    "reason": "Mide ve karÄ±n ÅŸikayetleri iÃ§in",
                    "confidence": 0.85
                },
                {
                    "clinic": "Genel Cerrahi",
                    "reason": "KarÄ±n aÄŸrÄ±sÄ± deÄŸerlendirmesi iÃ§in",
                    "confidence": 0.7
                }
            ]
        elif primary_category == 'respiratory':
            return [
                {
                    "clinic": "GÃ¶ÄŸÃ¼s HastalÄ±klarÄ±",
                    "reason": "Solunum yolu ÅŸikayetleri iÃ§in",
                    "confidence": 0.85
                },
                {
                    "clinic": "Kulak Burun BoÄŸaz",
                    "reason": "BoÄŸaz ve burun ÅŸikayetleri iÃ§in",
                    "confidence": 0.75
                }
            ]
        elif primary_category == 'dermatological':
            return [
                {
                    "clinic": "Dermatoloji",
                    "reason": "Cilt ve deri ÅŸikayetleri iÃ§in",
                    "confidence": 0.85
                },
                {
                    "clinic": "Aile HekimliÄŸi",
                    "reason": "Genel deÄŸerlendirme iÃ§in",
                    "confidence": 0.7
                }
            ]
        elif primary_category == 'musculoskeletal':
            return [
                {
                    "clinic": "Ortopedi",
                    "reason": "Kas ve eklem ÅŸikayetleri iÃ§in",
                    "confidence": 0.85
                },
                {
                    "clinic": "Fizik Tedavi",
                    "reason": "Kas ve eklem rehabilitasyonu iÃ§in",
                    "confidence": 0.75
                }
            ]
        elif primary_category == 'psychological':
            return [
                {
                    "clinic": "Psikiyatri",
                    "reason": "Ruh saÄŸlÄ±ÄŸÄ± deÄŸerlendirmesi iÃ§in",
                    "confidence": 0.85
                },
                {
                    "clinic": "Aile HekimliÄŸi",
                    "reason": "Genel deÄŸerlendirme iÃ§in",
                    "confidence": 0.7
                }
            ]
    
    # VarsayÄ±lan Ã¶neriler
    return [
        {
            "clinic": "Aile HekimliÄŸi",
            "reason": "Genel deÄŸerlendirme iÃ§in",
            "confidence": 0.7
        },
        {
            "clinic": "Ä°Ã§ HastalÄ±klarÄ±",
            "reason": "Genel muayene iÃ§in",
            "confidence": 0.6
        }
    ]

if __name__ == "__main__":
    print("ğŸš€ TanÄ±AI Randevu API BaÅŸlatÄ±lÄ±yor...")
    print("ğŸ“± Ana sayfa: http://localhost:8002")
    print("ğŸ”— API: http://localhost:8002/whisper/")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8002,
        log_level="info"
    )
