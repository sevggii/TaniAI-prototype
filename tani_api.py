"""
TANI TanÄ± Sistemi API
====================

Sadece TANI tanÄ± sistemi iÃ§in minimal API
"""

from fastapi import FastAPI, HTTPException, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import Dict, List
from datetime import datetime
import sys
from pathlib import Path
import os

# TANI sistem import'larÄ±
tani_root = Path(__file__).parent / "TANI"
sys.path.append(str(tani_root))
from UstSolunumYolu.modules.nlp_symptoms.src.diagnoser import score_symptoms

# FastAPI uygulamasÄ±
app = FastAPI(
    title="TANI TanÄ± Sistemi API",
    description="Ãœst solunum yolu hastalÄ±klarÄ± tanÄ± sistemi",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# GÃ¼venlik
security = HTTPBearer()

# Basit API anahtarÄ± sistemi
VALID_API_KEYS = {
    "dev_key_123": {"role": "developer", "rate_limit": 1000},
    "test_key_456": {"role": "test", "rate_limit": 100}
}

def verify_api_key(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """API anahtarÄ± doÄŸrulama"""
    api_key = credentials.credentials
    
    if api_key not in VALID_API_KEYS:
        raise HTTPException(
            status_code=401,
            detail="GeÃ§ersiz API anahtarÄ±"
        )
    
    return api_key

class TaniSymptomRequest(BaseModel):
    """TANI semptom analiz isteÄŸi"""
    symptoms: Dict[str, bool] = Field(..., description="Semptomlar (ates, kuru_oksuruk, vb.)")
    
    class Config:
        json_schema_extra = {
            "example": {
                "symptoms": {
                    "ates": True,
                    "kuru_oksuruk": True,
                    "nefes_darligi": True,
                    "koku_kaybi": True,
                    "burun_akintisi": False,
                    "hapÅŸirma": False
                }
            }
        }

class TaniDiagnosisResponse(BaseModel):
    """TANI tanÄ± yanÄ±tÄ±"""
    modality: Dict[str, Dict[str, float]] = Field(..., description="Modalite sonuÃ§larÄ±")
    prob_fused: Dict[str, float] = Field(..., description="BirleÅŸtirilmiÅŸ olasÄ±lÄ±klar")
    diagnosis: str = Field(..., description="En yÃ¼ksek olasÄ±lÄ±klÄ± tanÄ±")
    confidence: float = Field(..., description="GÃ¼ven skoru")
    recommendations: List[str] = Field(..., description="Ã–neriler")
    timestamp: str = Field(..., description="Analiz zamanÄ±")

@app.get("/", response_model=Dict[str, str])
async def root():
    """Ana endpoint"""
    return {
        "message": "TANI TanÄ± Sistemi API",
        "version": "1.0.0",
        "status": "active",
        "docs": "/docs"
    }

@app.get("/health", response_model=Dict[str, str])
async def health_check():
    """Sistem saÄŸlÄ±k kontrolÃ¼"""
    return {
        "status": "healthy",
        "service": "tani",
        "timestamp": datetime.now().isoformat()
    }

@app.post("/tani/diagnose", 
          response_model=TaniDiagnosisResponse,
          tags=["TANI Diagnosis"])
async def tani_diagnose(
    request: TaniSymptomRequest,
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """
    ğŸ©º TANI Semptom Analizi
    
    Ãœst solunum yolu hastalÄ±klarÄ±nÄ± semptomlara gÃ¶re analiz eder:
    - COVID-19
    - GRIP (Grip)
    - SOGUK_ALGINLIGI (SoÄŸuk AlgÄ±nlÄ±ÄŸÄ±)
    - MEVSIMSEL_ALERJI (Mevsimsel Alerji)
    """
    try:
        # Semptom analizi yap
        nlp_probs = score_symptoms(request.symptoms)
        
        # Vision modÃ¼lÃ¼ ÅŸimdilik devre dÄ±ÅŸÄ± (sadece NLP)
        vision_probs = {c: 0.0 for c in ["COVID-19", "GRIP", "SOGUK_ALGINLIGI", "MEVSIMSEL_ALERJI"]}
        
        # Normalize et
        def normalize_probs(probs):
            total = sum(probs.values()) or 1.0
            return {k: v/total for k, v in probs.items()}
        
        nlp_probs = normalize_probs(nlp_probs)
        vision_probs = normalize_probs(vision_probs)
        
        # FÃ¼zyon (NLP %60, Vision %40)
        w_nlp, w_vision = 0.6, 0.4
        fused_probs = {
            disease: w_nlp * nlp_probs.get(disease, 0.0) + w_vision * vision_probs.get(disease, 0.0)
            for disease in ["COVID-19", "GRIP", "SOGUK_ALGINLIGI", "MEVSIMSEL_ALERJI"]
        }
        fused_probs = normalize_probs(fused_probs)
        
        # En yÃ¼ksek olasÄ±lÄ±klÄ± tanÄ±yÄ± bul
        best_diagnosis = max(fused_probs.items(), key=lambda x: x[1])
        diagnosis_name = best_diagnosis[0]
        confidence = best_diagnosis[1]
        
        # Ã–neriler oluÅŸtur
        recommendations = []
        if diagnosis_name == "COVID-19":
            recommendations = [
                "COVID-19 ÅŸÃ¼phesi var. Derhal test yaptÄ±rÄ±n.",
                "Kendinizi izole edin ve diÄŸer insanlarla temasÄ± sÄ±nÄ±rlayÄ±n.",
                "AteÅŸ ve nefes darlÄ±ÄŸÄ± varsa acil servise baÅŸvurun.",
                "Bol sÄ±vÄ± tÃ¼ketin ve dinlenin."
            ]
        elif diagnosis_name == "GRIP":
            recommendations = [
                "Grip belirtileri tespit edildi. Doktora baÅŸvurun.",
                "Bol sÄ±vÄ± tÃ¼ketin ve yatak istirahati yapÄ±n.",
                "AteÅŸ dÃ¼ÅŸÃ¼rÃ¼cÃ¼ ilaÃ§lar kullanabilirsiniz.",
                "DiÄŸer insanlarla temasÄ± sÄ±nÄ±rlayÄ±n."
            ]
        elif diagnosis_name == "SOGUK_ALGINLIGI":
            recommendations = [
                "SoÄŸuk algÄ±nlÄ±ÄŸÄ± belirtileri tespit edildi.",
                "Bol sÄ±vÄ± tÃ¼ketin ve dinlenin.",
                "Burun tÄ±kanÄ±klÄ±ÄŸÄ± iÃ§in tuzlu su ile gargara yapÄ±n.",
                "Semptomlar 7-10 gÃ¼n iÃ§inde dÃ¼zelmelidir."
            ]
        elif diagnosis_name == "MEVSIMSEL_ALERJI":
            recommendations = [
                "Mevsimsel alerji belirtileri tespit edildi.",
                "Antihistaminik ilaÃ§lar kullanabilirsiniz.",
                "Alerjenlerden kaÃ§Ä±nÄ±n (polen, toz vb.).",
                "GÃ¶zlerinizi yÄ±kayÄ±n ve burun temizliÄŸi yapÄ±n."
            ]
        
        return TaniDiagnosisResponse(
            modality={
                "nlp": nlp_probs,
                "vision": vision_probs
            },
            prob_fused=fused_probs,
            diagnosis=diagnosis_name,
            confidence=confidence,
            recommendations=recommendations,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"TANI tanÄ± hatasÄ±: {str(e)}")

@app.get("/tani/symptoms", tags=["TANI Diagnosis"])
async def get_available_symptoms():
    """
    ğŸ“‹ Mevcut Semptomlar
    
    TANI sisteminde kullanÄ±labilen tÃ¼m semptomlarÄ± listeler.
    """
    symptoms = {
        "ates": {"turkish": "AteÅŸ", "english": "Fever", "type": "boolean"},
        "titreme": {"turkish": "Titreme", "english": "Chills", "type": "boolean"},
        "kuru_oksuruk": {"turkish": "Kuru Ã–ksÃ¼rÃ¼k", "english": "Dry Cough", "type": "boolean"},
        "balgamli_oksuruk": {"turkish": "BalgamlÄ± Ã–ksÃ¼rÃ¼k", "english": "Productive Cough", "type": "boolean"},
        "bogaz_agrisi": {"turkish": "BoÄŸaz AÄŸrÄ±sÄ±", "english": "Sore Throat", "type": "boolean"},
        "burun_akintisi": {"turkish": "Burun AkÄ±ntÄ±sÄ±", "english": "Runny Nose", "type": "boolean"},
        "burun_tikanikligi": {"turkish": "Burun TÄ±kanÄ±klÄ±ÄŸÄ±", "english": "Nasal Congestion", "type": "boolean"},
        "hapÅŸirma": {"turkish": "HapÅŸÄ±rma", "english": "Sneezing", "type": "boolean"},
        "kas_agrisi": {"turkish": "Kas AÄŸrÄ±sÄ±", "english": "Muscle Ache", "type": "boolean"},
        "yorgunluk": {"turkish": "Yorgunluk", "english": "Fatigue", "type": "boolean"},
        "nefes_darligi": {"turkish": "Nefes DarlÄ±ÄŸÄ±", "english": "Shortness of Breath", "type": "boolean"},
        "koku_kaybi": {"turkish": "Koku KaybÄ±", "english": "Loss of Smell", "type": "boolean"},
        "goz_kasintisi": {"turkish": "GÃ¶z KaÅŸÄ±ntÄ±sÄ±", "english": "Itchy Eyes", "type": "boolean"},
        "goz_sulanmasi": {"turkish": "GÃ¶z SulanmasÄ±", "english": "Watery Eyes", "type": "boolean"}
    }
    
    return {
        "symptoms": symptoms,
        "total_symptoms": len(symptoms),
        "diseases": ["COVID-19", "GRIP", "SOGUK_ALGINLIGI", "MEVSIMSEL_ALERJI"],
        "timestamp": datetime.now().isoformat()
    }

@app.get("/tani/health", tags=["TANI Diagnosis"])
async def tani_health_check():
    """
    âœ“ TANI Sistem SaÄŸlÄ±k KontrolÃ¼
    
    TANI tanÄ± sisteminin durumunu kontrol eder.
    """
    try:
        # NLP modÃ¼lÃ¼nÃ¼ test et
        test_symptoms = {"ates": True, "kuru_oksuruk": True}
        test_result = score_symptoms(test_symptoms)
        
        return {
            "status": "healthy",
            "nlp_module": "loaded",
            "vision_module": "not_available",
            "test_result": test_result,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "tani_api:app",
        host="0.0.0.0",
        port=8002,
        reload=True,
        log_level="info"
    )
